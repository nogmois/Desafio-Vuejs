{"ast":null,"code":"import { onMounted, ref } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport ProjectList from '../components/ProjectList.vue';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3000'; // Certifique-se de que está apontando para a porta correta\n\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    ProjectList\n  },\n  computed: {\n    pendingTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => !task.isCompleted && !task.inProgress);\n    },\n    inProgressTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.inProgress);\n    },\n    completedTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.isCompleted);\n    }\n  },\n  setup() {\n    const projectStore = useProjectStore();\n    const showProjects = ref(true);\n    const toggleProjects = () => {\n      showProjects.value = !showProjects.value;\n    };\n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n    return {\n      projectStore,\n      showProjects,\n      toggleProjects\n    };\n  },\n  methods: {\n    addTask(task) {\n      if (this.projectStore.currentProject) {\n        const projectId = this.projectStore.currentProject._id;\n        this.projectStore.addTaskToProject(projectId, task);\n      } else {\n        console.error('Nenhum projeto selecionado');\n      }\n    },\n    addProject(project) {\n      this.projectStore.addProject(project);\n      this.projectStore.currentProject = project;\n    },\n    selectProject(project) {\n      this.projectStore.currentProject = project;\n    },\n    async removeTask(taskId) {\n      try {\n        console.log(`Tentando remover tarefa com ID: ${taskId}`);\n        const response = await axios.delete(`/api/tasks/${taskId}`);\n        console.log('Resposta da API:', response.data);\n        this.projectStore.currentProject.tasks = this.projectStore.currentProject.tasks.filter(task => task._id !== taskId);\n        console.log('Tarefa removida com sucesso');\n      } catch (error) {\n        console.error('Erro ao remover tarefa:', error);\n        console.error('Configuração da requisição:', error.config);\n        console.error('Resposta da API:', error.response);\n        console.error('Requisição original:', error.request);\n      }\n    }\n  }\n};","map":{"version":3,"names":["onMounted","ref","useProjectStore","TaskCard","NewTaskForm","NewProjectForm","ProjectList","axios","defaults","baseURL","name","components","computed","pendingTasks","projectStore","currentProject","tasks","filter","task","isCompleted","inProgress","inProgressTasks","completedTasks","setup","showProjects","toggleProjects","value","fetchProjects","methods","addTask","projectId","_id","addTaskToProject","console","error","addProject","project","selectProject","removeTask","taskId","log","response","delete","data","config","request"],"sources":["/home/vboxuser/d_vue/src/views/ProjectDashboard.vue"],"sourcesContent":["<template>\n  <v-container fluid>\n    <div class=\"layout-wrapper\">\n      <!-- Botão de Hambúrguer -->\n      <v-btn icon @click=\"toggleProjects\">\n        <i class=\"mdi mdi-menu\"></i>\n      </v-btn>\n\n      <!-- Lista de Projetos -->\n      <div v-if=\"showProjects\" class=\"projects\">\n        <v-card class=\"card-custom\">\n          <v-card-title class=\"title-custom\">Projetos</v-card-title>\n          <v-card-text>\n            <project-list :projects=\"projectStore.projects\" @select-project=\"selectProject\" />\n          </v-card-text>\n        </v-card>\n        <v-btn\n          color=\"primary\"\n          class=\"mt-3 new-project-button\"\n          @click=\"addNewProject\"\n        >\n          + Novo Projeto\n        </v-btn>\n      </div>\n\n      <!-- Tarefas -->\n      <div class=\"tasks\" v-if=\"projectStore.currentProject\">\n        <v-row>\n          <v-col cols=\"12\" v-for=\"task in projectStore.currentProject.tasks\" :key=\"task._id\">\n            <v-card class=\"card-custom-project\">\n              <v-card-text>\n                <task-card :task=\"task\" @remove-task=\"removeTask\"/>\n              </v-card-text>\n            </v-card>\n          </v-col>\n        </v-row>\n      </div>\n\n      <!-- Formulários -->\n      <div class=\"forms\">\n        <v-card class=\"card-custom\">\n          <v-card-title>Nova Tarefa</v-card-title>\n          <v-card-text>\n            <new-task-form @add-task=\"addTask\" />\n          </v-card-text>\n        </v-card>\n        <v-card class=\"card-custom mt-4\">\n          <v-card-title>Novo Projeto</v-card-title>\n          <v-card-text>\n            <new-project-form @add-project=\"addProject\" />\n          </v-card-text>\n        </v-card>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport { onMounted, ref  } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport ProjectList from '../components/ProjectList.vue';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3000'; // Certifique-se de que está apontando para a porta correta\n\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    ProjectList\n  },\n  computed: {\n    pendingTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => !task.isCompleted && !task.inProgress);\n    },\n    inProgressTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.inProgress);\n    },\n    completedTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.isCompleted);\n    }\n  },\n  setup() {\n    const projectStore = useProjectStore();\n    const showProjects = ref(true);\n\n    const toggleProjects = () => {\n      showProjects.value = !showProjects.value;\n    };\n\n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n\n    return {\n      projectStore,\n      showProjects,\n      toggleProjects\n    };\n  },\n  methods: {\n    addTask(task) {\n      if (this.projectStore.currentProject) {\n        const projectId = this.projectStore.currentProject._id;\n        this.projectStore.addTaskToProject(projectId, task);\n      } else {\n        console.error('Nenhum projeto selecionado');\n      }\n    },\n    addProject(project) {\n      this.projectStore.addProject(project);\n      this.projectStore.currentProject = project;\n    },\n    selectProject(project) {\n      this.projectStore.currentProject = project;\n    },\n    async removeTask(taskId) {\n      try {\n        console.log(`Tentando remover tarefa com ID: ${taskId}`);\n        const response = await axios.delete(`/api/tasks/${taskId}`);\n        console.log('Resposta da API:', response.data);\n        this.projectStore.currentProject.tasks = this.projectStore.currentProject.tasks.filter(task => task._id !== taskId);\n        console.log('Tarefa removida com sucesso');\n      } catch (error) {\n        console.error('Erro ao remover tarefa:', error);\n        console.error('Configuração da requisição:', error.config);\n        console.error('Resposta da API:', error.response);\n        console.error('Requisição original:', error.request);\n      }\n    }\n  }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}