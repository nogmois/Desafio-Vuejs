{"ast":null,"code":"import { onMounted } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport ProjectList from '../components/ProjectList.vue';\nimport draggable from 'vuedraggable';\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    ProjectList,\n    draggable\n  },\n  computed: {\n    pendingTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => !task.isCompleted && !task.inProgress);\n    },\n    inProgressTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.inProgress);\n    },\n    completedTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.isCompleted);\n    }\n  },\n  setup() {\n    const projectStore = useProjectStore();\n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n    return {\n      projectStore\n    };\n  },\n  methods: {\n    updateTaskStatus(event) {\n      // Determinar o novo status com base na coluna de destino\n      const newStatus = this.getColumnStatus(event.to);\n\n      // Obter o ID da tarefa arrastada\n      const taskId = event.item.dataset.taskId;\n\n      // Preparar os dados a serem enviados para o backend\n      const payload = {\n        status: newStatus\n      };\n\n      // Fazer a requisição PUT para atualizar o status da tarefa\n      fetch(`/api/tasks/${taskId}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.userToken // Substitua pelo seu método de autenticação\n        },\n        body: JSON.stringify(payload)\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          console.log('Status da tarefa atualizado com sucesso.');\n          // Aqui você também pode querer atualizar o estado da tarefa no Vuex ou Pinia\n        } else {\n          console.error('Falha ao atualizar o status da tarefa:', data.message);\n        }\n      }).catch(error => console.error('Erro na atualização do status da tarefa:', error));\n    },\n    getColumnStatus(columnElement) {\n      // Determina o status com base no elemento DOM da coluna de destino\n      if (columnElement.classList.contains('pending-column')) {\n        return 'Pendente';\n      } else if (columnElement.classList.contains('progress-column')) {\n        return 'Em Progresso';\n      } else if (columnElement.classList.contains('completed-column')) {\n        return 'Concluído';\n      }\n      return null; // ou um valor padrão, se necessário\n    }\n  }\n};","map":{"version":3,"names":["onMounted","useProjectStore","TaskCard","NewTaskForm","NewProjectForm","ProjectList","draggable","name","components","computed","pendingTasks","projectStore","currentProject","tasks","filter","task","isCompleted","inProgress","inProgressTasks","completedTasks","setup","fetchProjects","methods","updateTaskStatus","event","newStatus","getColumnStatus","to","taskId","item","dataset","payload","status","fetch","method","headers","userToken","body","JSON","stringify","then","response","json","data","success","console","log","error","message","catch","columnElement","classList","contains"],"sources":["/home/vboxuser/d_vue/src/views/ProjectDashboard.vue"],"sourcesContent":["<template>\n  <v-container fluid>\n    <div class=\"layout-wrapper\">\n      <!-- Lista de Projetos -->\n      <div class=\"projects\">\n        <v-card class=\"card-custom\">\n          <v-card-title class=\"title-custom\">Projetos</v-card-title>\n          <v-card-text>\n            <project-list :projects=\"projectStore.projects\" @select-project=\"selectProject\" />\n          </v-card-text>\n        </v-card>\n        <v-btn\n          color=\"primary\"\n          class=\"mt-3 new-project-button\"\n          @click=\"addNewProject\"\n        >\n          + Novo Projeto\n        </v-btn>\n      </div>\n\n      <!-- Tarefas -->\n      <div class=\"tasks\" v-if=\"projectStore.currentProject\">\n        <v-row>\n          <!-- Coluna de tarefas pendentes -->\n          <v-col cols=\"12\" md=\"4\">\n            <h3>Pendente</h3>\n            <draggable class=\"drag-area\" :list=\"pendingTasks\" group=\"tasks\" @end=\"updateTaskStatus\">\n              <v-card class=\"card-custom-project\" v-for=\"task in pendingTasks\" :key=\"task._id\">\n                <v-card-text>\n                  <task-card :task=\"task\" />\n                </v-card-text>\n              </v-card>\n            </draggable>\n          </v-col>\n\n          <!-- Coluna de tarefas em progresso -->\n          <v-col cols=\"12\" md=\"4\">\n            <h3>Em Progresso</h3>\n            <draggable class=\"drag-area\" :list=\"inProgressTasks\" group=\"tasks\" @end=\"updateTaskStatus\">\n              <v-card class=\"card-custom-project\" v-for=\"task in inProgressTasks\" :key=\"task._id\">\n                <v-card-text>\n                  <task-card :task=\"task\" />\n                </v-card-text>\n              </v-card>\n            </draggable>\n          </v-col>\n\n          <!-- Coluna de tarefas concluídas -->\n          <v-col cols=\"12\" md=\"4\">\n            <h3>Concluído</h3>\n            <draggable class=\"drag-area\" :list=\"completedTasks\" group=\"tasks\" @end=\"updateTaskStatus\">\n              <v-card class=\"card-custom-project\" v-for=\"task in completedTasks\" :key=\"task._id\">\n                <v-card-text>\n                  <task-card :task=\"task\" />\n                </v-card-text>\n              </v-card>\n            </draggable>\n          </v-col>\n        </v-row>\n      </div>\n\n\n      <!-- Formulários -->\n      <div class=\"forms\">\n        <v-card class=\"card-custom\">\n          <v-card-title>Nova Tarefa</v-card-title>\n          <v-card-text>\n            <new-task-form @add-task=\"addTask\" />\n          </v-card-text>\n        </v-card>\n        <v-card class=\"card-custom mt-4\">\n          <v-card-title>Novo Projeto</v-card-title>\n          <v-card-text>\n            <new-project-form @add-project=\"addProject\" />\n          </v-card-text>\n        </v-card>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport { onMounted } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport ProjectList from '../components/ProjectList.vue';\nimport draggable from 'vuedraggable';\n\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    ProjectList,\n    draggable,\n  },\n  computed: {\n    pendingTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => !task.isCompleted && !task.inProgress);\n    },\n    inProgressTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.inProgress);\n    },\n    completedTasks() {\n      return this.projectStore.currentProject.tasks.filter(task => task.isCompleted);\n    }\n  },\n  setup() {\n    const projectStore = useProjectStore();\n\n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n\n    return {\n      projectStore\n    };\n  },\n  methods: {\n    updateTaskStatus(event) {\n      // Determinar o novo status com base na coluna de destino\n      const newStatus = this.getColumnStatus(event.to);\n\n      // Obter o ID da tarefa arrastada\n      const taskId = event.item.dataset.taskId;\n\n      // Preparar os dados a serem enviados para o backend\n      const payload = {\n        status: newStatus\n      };\n\n      // Fazer a requisição PUT para atualizar o status da tarefa\n      fetch(`/api/tasks/${taskId}/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + this.userToken  // Substitua pelo seu método de autenticação\n        },\n        body: JSON.stringify(payload)\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.success) {\n          console.log('Status da tarefa atualizado com sucesso.');\n          // Aqui você também pode querer atualizar o estado da tarefa no Vuex ou Pinia\n        } else {\n          console.error('Falha ao atualizar o status da tarefa:', data.message);\n        }\n      })\n      .catch(error => console.error('Erro na atualização do status da tarefa:', error));\n    },\n\n    getColumnStatus(columnElement) {\n      // Determina o status com base no elemento DOM da coluna de destino\n      if (columnElement.classList.contains('pending-column')) {\n        return 'Pendente';\n      } else if (columnElement.classList.contains('progress-column')) {\n        return 'Em Progresso';\n      } else if (columnElement.classList.contains('completed-column')) {\n        return 'Concluído';\n      }\n      return null; // ou um valor padrão, se necessário\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n\n.new-project-button {\n  width: 100%;\n  display: block;\n  padding: 10px;\n  border-radius: 5px;\n  text-align: center;\n  cursor: pointer;\n  background-color: #f0f0f0; /* Sobrescreve a cor primária se necessário */\n}\n\n.title-custom {\n  text-align: center; /* Centraliza o título se desejado */\n  margin-bottom: 20px; /* Espaço entre o título e a lista */\n}\n\n.card-custom {\n  max-width: 600px; /* Largura máxima do card */\n  padding: 20px; /* Espaçamento interno */\n  display: flex; /* Habilita o display flex */\n  flex-direction: column; /* Organiza os filhos em coluna */\n  gap: 10px; /* Espaço entre cada task-card */\n}\n\n.card-custom-project {\n  height: 99px;\n  width: 208px;\n  padding: 16px;\n  display: flex; /* Habilita o display flex */\n  flex-direction: column; /* Organiza os filhos em coluna */\n  gap: 10px; /* Espaço entre cada task-card */\n  background-color: white;\n  margin: 16px;\n  border-radius: 8px;\n  box-shadow: 0px 4px 6px -1px rgba(0,0,0,0.1), 0px 2px 4px -1px rgba(0,0,0,0.07);\n  border: 1px solid #ccc; /* Adiciona uma borda sólida cinza clara */\n}\n\n.layout-wrapper {\n  display: flex;\n  justify-content: space-between;\n  height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.projects, .tasks, .forms {\n  flex: 1;\n  margin: 0 10px;\n}\n\n.projects {\n  max-width: 300px;\n  background-color: #fff;\n  padding: 16px;\n}\n\n.tasks {\n  max-width: 100%; /* Ajusta a largura máxima para 100% */\n  display: flex; /* Habilita flexbox */\n  flex-wrap: wrap; /* Permite que os itens se ajustem conforme necessário */\n}\n\n.card-custom {\n  width: 100%; /* Faz com que cada cartão ocupe toda a largura da coluna */\n  margin-bottom: 20px; /* Adiciona um espaço entre os cartões */\n  padding: 14px;\n}\n\n.forms {\n  max-width: 300px;\n}\n\n.mt-4 {\n  margin-top: 16px;\n}\n</style>\n\n<style>\nbody {\n  background-color: #e5e5e5;\n  padding: 16px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}