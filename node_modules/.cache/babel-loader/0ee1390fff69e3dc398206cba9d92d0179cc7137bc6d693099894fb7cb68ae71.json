{"ast":null,"code":"import { onMounted, computed } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport ProjectList from '../components/ProjectList.vue';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport draggable from 'vuedraggable';\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    ProjectList,\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    draggable\n  },\n  setup() {\n    const projectStore = useProjectStore();\n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n    const tasksByStatus = computed(() => {\n      return {\n        'Pendente': projectStore.currentProject.tasks.filter(t => t.status === 'Pendente'),\n        'Em Progresso': projectStore.currentProject.tasks.filter(t => t.status === 'Em Progresso'),\n        'Feito': projectStore.currentProject.tasks.filter(t => t.status === 'Feito')\n      };\n    });\n    return {\n      projectStore,\n      tasksByStatus,\n      selectProject: project => {\n        projectStore.currentProject = project;\n      },\n      addTask: task => {\n        if (projectStore.currentProject) {\n          const projectId = projectStore.currentProject._id;\n          projectStore.addTaskToProject(projectId, task);\n        } else {\n          console.error('Nenhum projeto selecionado');\n        }\n      },\n      addProject: project => {\n        projectStore.addProject(project);\n        projectStore.currentProject = project;\n      },\n      onEndDrag: event => {\n        const task = event.item;\n        const newStatus = event.to.getAttribute('status');\n        task.status = newStatus;\n        // Aqui você pode chamar uma API para atualizar o status no backend\n      }\n    };\n  }\n};","map":{"version":3,"names":["onMounted","computed","useProjectStore","ProjectList","TaskCard","NewTaskForm","NewProjectForm","draggable","name","components","setup","projectStore","fetchProjects","tasksByStatus","currentProject","tasks","filter","t","status","selectProject","project","addTask","task","projectId","_id","addTaskToProject","console","error","addProject","onEndDrag","event","item","newStatus","to","getAttribute"],"sources":["/home/vboxuser/d_vue/src/views/ProjectDashboard.vue"],"sourcesContent":["<template>\n  <v-container fluid>\n    <div class=\"layout-wrapper\">\n      <!-- Lista de Projetos -->\n      <div class=\"projects\">\n        <v-card class=\"card-custom\">\n          <v-card-title class=\"title-custom\">Projetos</v-card-title>\n          <v-card-text>\n            <project-list :projects=\"projectStore.projects\" @select-project=\"selectProject\" />\n          </v-card-text>\n        </v-card>\n      </div>\n\n      <!-- Tarefas -->\n      <div class=\"tasks\" v-if=\"projectStore.currentProject\">\n        <v-row>\n          <v-col cols=\"12\" md=\"4\" v-for=\"status in ['Pendente', 'Em Progresso', 'Feito']\" :key=\"status\">\n            <v-card>\n              <v-card-title>{{ status }}</v-card-title>\n              <v-card-text>\n                <draggable class=\"drag-area\" :list=\"tasksByStatus[status]\" group=\"tasks\" @end=\"onEndDrag\">\n                  <template #item=\"{ element }\">\n                    <v-card :key=\"element._id\" class=\"card-custom-project\">\n                      <v-card-text>\n                        <task-card :task=\"element\" />\n                      </v-card-text>\n                    </v-card>\n                  </template>\n                </draggable>\n              </v-card-text>\n            </v-card>\n          </v-col>\n        </v-row>\n      </div>\n\n      <!-- Formulários -->\n      <div class=\"forms\">\n        <v-card class=\"card-custom\">\n          <v-card-title>Nova Tarefa</v-card-title>\n          <v-card-text>\n            <new-task-form @add-task=\"addTask\" />\n          </v-card-text>\n        </v-card>\n        <v-card class=\"card-custom mt-4\">\n          <v-card-title>Novo Projeto</v-card-title>\n          <v-card-text>\n            <new-project-form @add-project=\"addProject\" />\n          </v-card-text>\n        </v-card>\n      </div>\n    </div>\n  </v-container>\n</template>\n\n<script>\nimport { onMounted, computed } from 'vue';\nimport { useProjectStore } from '../store/projects';\nimport ProjectList from '../components/ProjectList.vue';\nimport TaskCard from '../components/TaskCard.vue';\nimport NewTaskForm from '../components/NewTaskForm.vue';\nimport NewProjectForm from '../components/NewProjectForm.vue';\nimport draggable from 'vuedraggable';\n\nexport default {\n  name: 'ProjectDashboard',\n  components: {\n    ProjectList,\n    TaskCard,\n    NewTaskForm,\n    NewProjectForm,\n    draggable\n  },\n  setup() {\n    const projectStore = useProjectStore();\n    \n    onMounted(() => {\n      projectStore.fetchProjects();\n    });\n    \n    const tasksByStatus = computed(() => {\n      return {\n        'Pendente': projectStore.currentProject.tasks.filter(t => t.status === 'Pendente'),\n        'Em Progresso': projectStore.currentProject.tasks.filter(t => t.status === 'Em Progresso'),\n        'Feito': projectStore.currentProject.tasks.filter(t => t.status === 'Feito'),\n      };\n    });\n    \n    return {\n      projectStore,\n      tasksByStatus,\n      selectProject: (project) => {\n        projectStore.currentProject = project;\n      },\n      addTask: (task) => {\n        if (projectStore.currentProject) {\n          const projectId = projectStore.currentProject._id;\n          projectStore.addTaskToProject(projectId, task);\n        } else {\n          console.error('Nenhum projeto selecionado');\n        }\n      },\n      addProject: (project) => {\n        projectStore.addProject(project);\n        projectStore.currentProject = project;\n      },\n      onEndDrag: (event) => {\n        const task = event.item;\n        const newStatus = event.to.getAttribute('status');\n        task.status = newStatus;\n        // Aqui você pode chamar uma API para atualizar o status no backend\n      }\n    };\n  }\n}\n</script>\n\n<style scoped>\n.title-custom {\n  text-align: center; /* Centraliza o título se desejado */\n  margin-bottom: 20px; /* Espaço entre o título e a lista */\n}\n\n.card-custom {\n  max-width: 600px; /* Largura máxima do card */\n  padding: 20px; /* Espaçamento interno */\n  display: flex; /* Habilita o display flex */\n  flex-direction: column; /* Organiza os filhos em coluna */\n  gap: 10px; /* Espaço entre cada task-card */\n}\n\n.card-custom-project {\n  height: 99px;\n  display: flex; /* Habilita o display flex */\n  flex-direction: column; /* Organiza os filhos em coluna */\n  gap: 10px; /* Espaço entre cada task-card */\n  background-color: white;\n  margin: 16px;\n  box-shadow: 0px 4px 6px -1px rgba(0,0,0,0.1), 0px 2px 4px -1px rgba(0,0,0,0.07);\n}\n\n.layout-wrapper {\n  display: flex;\n  justify-content: space-between;\n  height: 100vh;\n  background-color: #f0f0f0;\n}\n\n.projects, .tasks, .forms {\n  flex: 1;\n  margin: 0 10px;\n}\n\n.projects {\n  max-width: 300px;\n  background-color: #fff;\n  padding: 16px;\n}\n\n.tasks {\n  max-width: 100%; /* Ajusta a largura máxima para 100% */\n  display: flex; /* Habilita flexbox */\n  flex-wrap: wrap; /* Permite que os itens se ajustem conforme necessário */\n}\n\n.card-custom {\n  width: 100%; /* Faz com que cada cartão ocupe toda a largura da coluna */\n  margin-bottom: 20px; /* Adiciona um espaço entre os cartões */\n  padding: 14px;\n}\n\n.forms {\n  max-width: 300px;\n}\n\n.mt-4 {\n  margin-top: 16px;\n}\n</style>\n\n<style>\nbody {\n  background-color: #e5e5e5;\n  padding: 16px;\n}\n</style>\n"],"mappings":"AAuDA,SAASA,SAAS,EAAEC,QAAO,QAAS,KAAK;AACzC,SAASC,eAAc,QAAS,mBAAmB;AACnD,OAAOC,WAAU,MAAO,+BAA+B;AACvD,OAAOC,QAAO,MAAO,4BAA4B;AACjD,OAAOC,WAAU,MAAO,+BAA+B;AACvD,OAAOC,cAAa,MAAO,kCAAkC;AAC7D,OAAOC,SAAQ,MAAO,cAAc;AAEpC,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,UAAU,EAAE;IACVN,WAAW;IACXC,QAAQ;IACRC,WAAW;IACXC,cAAc;IACdC;EACF,CAAC;EACDG,KAAKA,CAAA,EAAG;IACN,MAAMC,YAAW,GAAIT,eAAe,CAAC,CAAC;IAEtCF,SAAS,CAAC,MAAM;MACdW,YAAY,CAACC,aAAa,CAAC,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMC,aAAY,GAAIZ,QAAQ,CAAC,MAAM;MACnC,OAAO;QACL,UAAU,EAAEU,YAAY,CAACG,cAAc,CAACC,KAAK,CAACC,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,MAAK,KAAM,UAAU,CAAC;QAClF,cAAc,EAAEP,YAAY,CAACG,cAAc,CAACC,KAAK,CAACC,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,MAAK,KAAM,cAAc,CAAC;QAC1F,OAAO,EAAEP,YAAY,CAACG,cAAc,CAACC,KAAK,CAACC,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,MAAK,KAAM,OAAO;MAC7E,CAAC;IACH,CAAC,CAAC;IAEF,OAAO;MACLP,YAAY;MACZE,aAAa;MACbM,aAAa,EAAGC,OAAO,IAAK;QAC1BT,YAAY,CAACG,cAAa,GAAIM,OAAO;MACvC,CAAC;MACDC,OAAO,EAAGC,IAAI,IAAK;QACjB,IAAIX,YAAY,CAACG,cAAc,EAAE;UAC/B,MAAMS,SAAQ,GAAIZ,YAAY,CAACG,cAAc,CAACU,GAAG;UACjDb,YAAY,CAACc,gBAAgB,CAACF,SAAS,EAAED,IAAI,CAAC;QAChD,OAAO;UACLI,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;QAC7C;MACF,CAAC;MACDC,UAAU,EAAGR,OAAO,IAAK;QACvBT,YAAY,CAACiB,UAAU,CAACR,OAAO,CAAC;QAChCT,YAAY,CAACG,cAAa,GAAIM,OAAO;MACvC,CAAC;MACDS,SAAS,EAAGC,KAAK,IAAK;QACpB,MAAMR,IAAG,GAAIQ,KAAK,CAACC,IAAI;QACvB,MAAMC,SAAQ,GAAIF,KAAK,CAACG,EAAE,CAACC,YAAY,CAAC,QAAQ,CAAC;QACjDZ,IAAI,CAACJ,MAAK,GAAIc,SAAS;QACvB;MACF;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}